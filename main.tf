provider "aws" {
  region = "us-east-1"
}

variable "node-count" {
  default = 2
}

resource "aws_security_group" "standard-ssh-sg" {
  name = "standard-ssh"
  description = "Terraform autogenerated aws security group"

  # SSH
  ingress {
    from_port = 22
    to_port = 22
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # out anywhere
  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}

data "template_file" "ansible-setup" {
  template = "${file("ansible-setup.sh")}"
  vars = {
    node_names = "${join("\n", formatlist("%s ansible_user=ubuntu", aws_instance.nodes.*.tags.Name))}"
    node_ips = "${join("\n", formatlist("%s %s", aws_instance.nodes.*.private_ip, aws_instance.nodes.*.tags.Name))}"
  }
}


resource "aws_instance" "ansible-host" {
  ami = "${data.aws_ami.ubuntu.id}"
  instance_type = "t2.micro"
  key_name = "first"
  security_groups = ["${aws_security_group.standard-ssh-sg.name}"]
  
  tags {
    Name = "ansible-host"
  }

  user_data = "${data.template_file.ansible-setup.rendered}"
}

resource "aws_instance" "nodes" {
  ami = "${data.aws_ami.ubuntu.id}"
  instance_type = "t2.micro"
  key_name = "first"
  security_groups = ["${aws_security_group.standard-ssh-sg.name}"]
  
  count = "${var.node-count}"

  tags {
    Name = "node0${count.index + 1}"
  }
}

output "ansible_host_ip" {
  value = "${aws_instance.ansible-host.public_ip}"
}

output "nodes_ip" {
  value = ["${aws_instance.nodes.*.public_ip}"]
}

